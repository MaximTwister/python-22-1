from typing import Callable

import psycopg2
from psycopg2.extras import DictCursor, DictRow
from psycopg2.sql import Identifier, SQL


def with_dict_cursor(**creds):
    def with_cursor_decorator(f: Callable) -> Callable:
        def with_cursor_wrapper(*args, **kwargs):
            connection_data = {"dbname": "pemutshs", "host": "mel.db.elephantsql.com"}
            connection_data.update(creds)
            conn = psycopg2.connect(**connection_data)
            cur = conn.cursor(cursor_factory=DictCursor)

            try:
                f(*args, **kwargs, cur=cur)
            except Exception as e:
                conn.rollback()
                print(f"SQL query failed with error: {e}")
                raise e
            else:
                conn.commit()
            finally:
                cur.close()
                conn.close()
        return with_cursor_wrapper
    return with_cursor_decorator


@with_dict_cursor(user="pemutshs", password="yi0t-vAjBlSQ-slnwTRbloAO2X72DpWe")
def create_table(table_name=None, fields=str, cur=None):
    if table_name is None:
        print("error: no table name was provided.")
        return False
    if cur is None:
        print("error: no cursor was provided.")
        return False

    query = SQL(
        "DROP TABLE IF EXISTS {table_name} CASCADE; CREATE TABLE {table_name} ({fields})"
        ).format(
            table_name=Identifier(table_name),
            fields=SQL(fields)
            )

    print(f"raw query: {query.as_string(cur)}")
    cur.execute(query)


@with_dict_cursor(user="pemutshs", password="yi0t-vAjBlSQ-slnwTRbloAO2X72DpWe")
def insert_table_data(table_name=None, values=str, cur=None):
    if table_name is None:
        print("error: no table name was provided.")
        return False
    if cur is None:
        print("error: no cursor was provided.")
        return False

    q = SQL("INSERT INTO {table_name} {values}").format(
            table_name=Identifier(table_name),
            values=SQL(values),
        )

    print(f"raw query: {q.as_string(cur)}")
    cur.execute(q)

# 1. Find the total revenue generated by the restaurant for a specific period of time.
# @with_dict_cursor(user="pemutshs", password="yi0t-vAjBlSQ-slnwTRbloAO2X72DpWe")
# def task_1(start_date=None, end_date=None, cur=None):
#     if start_date is None:
#         print("error: no start_date was provided.")
#         return False
#     if end_date is None:
#         print("error: no end_date was provided.")
#         return False
#     if cur is None:
#         print("error: no cursor was provided.")
#         return False
#
# q = SQL("DO $$ DECLARE start_date DATE := {start_date}; end_date DATE := {end_date}; revenue NUMERIC(10,
# 2); BEGIN with basic as (select m.id as meals_id, concat(mc.main_course_name , ' + ', d.drink_name) as meal_name,
# (mc.price + d.price) as meal_price, om.portions, o.id as order_id, o.order_date, o.customer_id, (mc.price +
# d.price)*om.portions as basic_sum, dis.percents as perc_meal, dis."period", d2.percents as perc_custom,
# d2."period", case when dis.period @> o.order_date and dis.meal_id is not null then ((mc.price +
# d.price)*om.portions * (100 - dis.percents)/100)::numeric(10,2) when d2.period @> o.order_date and d2.customer_id
# is not null then ((mc.price + d.price)*om.portions * (100 - d2.percents)/100)::numeric(10,2) else (mc.price +
# d.price)*om.portions end sum_disc FROM meals m join main_courses mc on mc.id = m.main_course_id join drinks d on
# d.id = m.drink_id join order_meal om on m.id = om.meal_id join orders o on om.order_id = o.id join customers c on
# c.id = o.customer_id left join discounts dis on dis.meal_id = m.id left join discounts d2 on d2.customer_id = c.id
# WHERE o.order_date BETWEEN {start_date} AND {end_date} order by o.order_date) SELECT SUM(basic.sum_disc) INTO
# revenue FROM basic WHERE basic.order_date BETWEEN {start_date} AND {end_date}; RAISE NOTICE '[% - %] REVENUE: %',
# {start_date}, {end_date}, {revenue}; END; $$;").format(start_date=SQL(start_date), end_date=SQL(end_date))
#
#     print(f"raw query: {q.as_string(cur)}")
#     cur.execute(q)


create_table(table_name="customers", fields="id SERIAL PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50)")
create_table(table_name="main_courses", fields="id SERIAL PRIMARY KEY, main_course_name VARCHAR(50), price NUMERIC("
                                               "10, 2)")
create_table(table_name="drinks", fields="id SERIAL PRIMARY KEY, drink_name VARCHAR(50), price NUMERIC(10, 2)")
create_table(table_name="meals", fields="id SERIAL PRIMARY KEY, main_course_id INTEGER REFERENCES main_courses(id), "
                                        "drink_id INTEGER REFERENCES drinks(id)")
create_table(table_name="orders", fields="id SERIAL PRIMARY KEY, order_date DATE DEFAULT NOW(), customer_id INTEGER "
                                         "REFERENCES customers(id), order_sum NUMERIC(12, 2)")
create_table(table_name="order_meal", fields="order_id INTEGER REFERENCES orders(id), meal_id INTEGER REFERENCES "
                                             "meals(id), PRIMARY KEY(order_id, meal_id), portions INTEGER DEFAULT 1")
create_table(table_name="discounts", fields="id SERIAL PRIMARY KEY, customer_id INTEGER REFERENCES customers(id), "
                                            "meal_id INTEGER REFERENCES meals(id), percents NUMERIC(10, 2), "
                                            "period DATERANGE, EXCLUDE USING GIST (customer_id with = , period with &&)")
insert_table_data(table_name="customers", values="(customer_name, email) VALUES ('John Smith', 'john@gmail.com'), "
                                                 "('Jane Doe', 'jane@gmail.com'), ('Bob Johnson', 'bob@gmail.com'), "
                                                 "('Alice Lee', 'alice@gmail.com'), ('David Davis', "
                                                 "'david@gmail.com'), ('Emily Brown', 'emily@gmail.com'), "
                                                 "('George Williams', 'george@gmail.com'), ('Hannah Miller', "
                                                 "'hannah@gmail.com'), ('Isaac Wilson', 'isaac@gmail.com'), "
                                                 "('Julia Garcia', 'julia@gmail.com'), ('Kevin Jones', "
                                                 "'kevin@gmail.com'), ('Laura Martinez', 'laura@gmail.com'), "
                                                 "('Michael Rodriguez', 'michael@gmail.com'), ('Natalie Davis', "
                                                 "'natalie@gmail.com'), ('Oliver Robinson', 'oliver@gmail.com'), "
                                                 "('Penelope Taylor', 'penelope@gmail.com'), ('Quinn Johnson', "
                                                 "'quinn@gmail.com'), ('Rachel Baker', 'rachel@gmail.com'), "
                                                 "('Samantha Scott', 'samantha@gmail.com'), ('Thomas Clark', "
                                                 "'thomas@gmail.com')")
insert_table_data(table_name="main_courses", values="(main_course_name, price) VALUES ('Hamburger', 4.99), "
                                                    "('Cheeseburger', 5.49), ('Hot dog', 3.99), ('Chicken nuggets', "
                                                    "6.99), ('Fish and chips', 7.99), ('Grilled chicken sandwich', "
                                                    "6.49), ('BBQ pork sandwich', 7.49), ('Meatballs', 6.99), "
                                                    "('Spicy turkey sandwich', 5.99), ('Taco salad', 8.99);")
insert_table_data(table_name="drinks", values="(drink_name, price) VALUES ('Coca-Cola', 1.99), ('Sprite', 1.99), "
                                              "('Fanta', 1.99), ('Dr. Pepper', 2.49), ('Lager beer', 2.49), "
                                              "('Pilsner beer', 2.00), ('Iced tea', 2.49), ('Orange juice', 2.99), "
                                              "('Apple juice', 2.99), ('Milkshake', 3.99);")
insert_table_data(table_name="meals", values="(main_course_id, drink_id) SELECT main_courses.id, drinks.id FROM "
                                             "main_courses CROSS JOIN drinks;")
insert_table_data(table_name="orders", values="(order_date, customer_id, order_sum) SELECT current_date - CAST("
                                              "random() * 360 AS INTEGER) + interval '1 day' AS order_date, "
                                              "CAST((random() * 19 + 1) AS INTEGER) AS customer_id, CAST((random() * "
                                              "100 + 10) AS NUMERIC(10, 2)) AS order_sum FROM generate_series(1, "
                                              "1000);")
insert_table_data(table_name="order_meal", values="(order_id, meal_id, portions) SELECT o.id AS order_id, "
                                                  "selected_random_meal.id AS meal_id, trunc(random() * 3 + 1) as "
                                                  "portions FROM orders AS o CROSS JOIN LATERAL (SELECT * FROM meals "
                                                  "AS m WHERE m.id NOT IN (SELECT meal_id FROM order_meal WHERE "
                                                  "order_id = o.id) ORDER BY random() LIMIT 1) as "
                                                  "selected_random_meal;")
insert_table_data(table_name="discounts", values="(meal_id, percents, period) values (11,10.0, '[2023-01-01, "
                                                 "2023-01-05]'), (15,10.0, '[2023-01-01, 2023-01-05]'), (20,10.0, "
                                                 "'[2023-01-01, 2023-01-05]'), (77,10.0, '[2023-01-01, 2023-02-01]'), "
                                                 "(47,10.0, '[2023-01-01, 2023-02-01]'), (57,10.0, '[2023-01-01, "
                                                 "2023-02-01]')")


# 1. Find the total revenue generated by the restaurant for a specific period of time.
# task_1(start_date="2023-01-01", end_date="2023-01-31")


